

◻ eslinter?
    - 코드의 문법을 통일
    - 일부 prettier 기능도 지원합니다
    - linter

◻ prettier?
    - 코드의 포멧을 통일
    - code formatter

  ---> prettier는 자동으로 코드의 형태를 깔끔하게(맞춘 컨벤션에 따라) 정렬
       linter는 컨벤션에서 정한 문법에 어긋나면 경고 혹은 에러를 냅니다

       배포할때 포함될 필요가 없기때문에

       ⭐npm i -D prettier eslint eslint-plugin-prettier eslint-config-prettier
             -dev(개발용)        prettier 기능과 겹치지 않게하는 라이브러리
                                
       ⭐npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser
          타입스크립트 전용                                

          ◻ 사용법
            - 프로젝트 상위 경로에 (package.json과 같은 경로)
              .eslintrc
              .prettierrc

              파일을 생성
      
            - package.json > sciprts 에서 모든파일 적용해줄 명령어 코드 적기
                "lint": "eslint --cache",
                "format": "prettier --cache --write"

                npm run 명령어로 포멧팅과 린트검사가 가능합니다.

            - git hook ---> 깃 명렁어가 작동되기 전에 실행하는 명령어
                            1. 직접 만들 수 있으나 조작법이 까다롭고
                            2. 해당 git hook을 사용하는 모든 팀원들이 같은 git hook을 설정해야 하는 단점
            - ⭐husky 
                1. git hook을 commit과 push전에 사용할 수 있도록하는 라이브러리
                2. 해당 라이브러리는 설치 파일이기 때문에 한사람이 설정해도 모든 인원이 적용됩니다,
                3. 라이브러리지만 가볍습니다
                4. commit과 push하기 전마다 포멧팅/린트검사를 하기 번거로울 때 쓰는 라이브러리입니다.

                ⭐npm i -D husky
                ⭐npx husky install // 해당 프로젝트 기초셋팅
                      "postinstall":  "husky install" ---> 추가 (package.json > script)

                    npx husky add .husky/pre-commit 'npm run lint'
                    npx husky add .husky/pre-push 'npm run format'
                      (명령어 자동화)


                                


typescript react

typescript가 셋팅된 상태로 생성할 수 있는 명령어

  npx create-react-app 프로젝트명 --template typescript


 ** 주의사항  **
      - 일반 함수나, 객체들을 저장할 것은 .ts 확장자로(단순 js 문법)
      - 컴포넌트는 무조건 .tsx 확장자로 해줘야 실행이 됩니다.

      - setupTests.ts : 테스팅 할 때 필요합니다